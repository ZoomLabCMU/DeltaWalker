#!/usr/bin/env python

import time
import serial
import math
import numpy as np

PI = math.pi

class Prismatic_Delta:
    def __init__(self, u_p, u_b, l):
        # u_b:  distance to actuator from center of triangle on base
        # u_p:  distance to leg from center of triangle on end-effector
        # l:    delta leg length (attached to platform)

        self.l = l
        self.u_p = u_p
        self.u_b = u_b

        self.base1 = np.array([[0, u_b, 0]])
        a2 = -math.pi / 6
        self.base2 = np.array([[u_b * math.cos(a2), u_b * math.sin(a2), 0]])
        a3 = 7 * math.pi / 6
        self.base3 = np.array([[u_b * math.cos(a3), u_b * math.sin(a3), 0]])

    def IK(self, position):
        # find corners of ee platform
        u_p = self.u_p
        c1 = position + np.array([[0, u_p, 0]])
        a2 = -math.pi / 6
        c2 = position + np.array([[u_p * math.cos(a2), u_p * math.sin(a2), 0]])
        a3 = 7 * math.pi / 6
        c3 = position + np.array([[u_p * math.cos(a3), u_p * math.sin(a3), 0]])

        # squared dist to prismatic actuator axis
        d1 = np.sum(np.power(c1[0][0:2] - self.base1[0][0:2], 2))
        d2 = np.sum(np.power(c2[0][0:2] - self.base2[0][0:2], 2))
        d3 = np.sum(np.power(c3[0][0:2] - self.base3[0][0:2], 2))

        l = self.l ** 2
        if d1 > l or d2 > l or d3 > l:
            return [-42., -42., -42.]
        h1 = position[2] - math.sqrt(l - d1)
        h2 = position[2] - math.sqrt(l - d2)
        h3 = position[2] - math.sqrt(l - d3)

        heights = [h1, h2, h3]
        return heights

    def IK_Traj(self, trajectory):
        traj = np.zeros((len(trajectory), 3))
        for i in range(len(trajectory)):
            traj[i] = self.IK(trajectory[i])

        return traj

    def FK(self, heights):

        c1 = self.base1 + np.array([0,0,heights[0]])
        c2 = self.base2 + np.array([0,0,heights[1]])
        c3 = self.base3 + np.array([0,0,heights[2]])

        # shift sphere centers by platform offset
        u_p = self.u_p
        ic1 = c1 - np.array([0,u_p,0])
        a2 = -PI/6
        ic2 = c2 - np.array([u_p*math.cos(a2),u_p*math.sin(a2),0])
        a3 = 7*PI/6
        ic3 = c3 - np.array([u_p*math.cos(a3),u_p*math.sin(a3),0])

        l = self.l
        position = self.interx(ic1,ic2,ic3,l,l,l,1)
        position = np.transpose(position[0:3])

        return position

    def FK_Traj(self, heights):
        # FK on trajectory
        traj = np.zeros((heights.shape[0],3))
        for i in np.arange(heights.shape[0]):
            traj[i,:] = self.FK(heights[i,:])

        return traj

    def interx(self, X1=None,X2=None,X3=None,r1=None,r2=None,r3=None,pos=None):
        if X1 is None or X2 is None or X3 is None or r1 is None or r2 is None or r3 is None or pos is None:
            pos = 1 # default value
        # import ipdb
        # ipdb.set_trace()
        x1 = X1[0,0]
        y1 = X1[0,1]
        z1 = X1[0,2]
        x2 = X2[0,0]
        y2 = X2[0,1]
        z2 = X2[0,2]
        x3 = X3[0,0]
        y3 = X3[0,1]
        z3 = X3[0,2]
        # convert in coord sys at [x1 y1 z1] oriented same as global
        # x2 = 1
        # y2 = 1
        # z2 = 0.2
        # x3 = 2
        # y3 = 1
        # z3 = 1
        # r1 = 2.5
        # r2 = 2.6
        # r3 = 2.7 # TEST VALUES

        x2 = x2 - x1
        y2 = y2 - y1
        z2 = z2 - z1
        x3 = x3 - x1
        y3 = y3 - y1
        z3 = z3 - z1

        a=(16.0*y2**2*z3*y3**2*z2*x3*r1**2*x2-4*y2**3*z3*y3*z2*x3*r1**2*x2+4*y2**3*z3*y3*z2*x3*x2*r3**2-4*y2*y3**3*z2*x2*z3*r1**2*x3+4*y2*y3**3*z2*x2*z3*r2**2*x3+16*z2*x3**2*x2**2*r1**2*y3*y2*z3-4*z2*x3**3*x2*r1**2*y3*y2*z3+4*z2*x3**3*x2*y2*z3*r2**2*y3-4*x2**3*z3*x3*y2*r1**2*z2*y3+4*x2**3*z3*x3*y2*r3**2*z2*y3-4*y2*z3*z2**3*y3*x3*r1**2*x2+4*y2*z3*z2**3*y3*x3*x2*r3**2+8*y2*z3**2*z2**2*y3*x2*r1**2*x3-4*y2*z3**2*z2**2*y3*x2*r2**2*x3+4*x2**2*y3**2*z2*y2**2*z3*x3**2-4*x2**4*z3**2*x3**2*y3*y2-2*z2**2*x3**4*x2**2*y2**2+2*z2**2*x3**3*y2**2*r1**2*x2-2*z2**2*x3**3*y2**2*x2*r3**2+2*z2**2*x3**5*x2*y2*y3+2*x2**5*z3**2*x3*y3*y2+2*z2**3*y3**2*y2**2*z3*x3**2+2*z2**3*y3**2*x2**2*z3*x3**2+2*z2**3*y3**2*x2**2*z3*r1**2-2*z2**3*y3**2*x2**2*z3*r3**2+2*x2**2*y3**4*z2*y2**2*z3-4*x2**2*y3**2*z2**2*x3**2*y2**2+2*x2**4*y3**2*z2*z3*x3**2-2*x2**2*y3**3*z2**2*y2*x3**2+2*x2**2*y3**3*z2**2*y2*z3**2+2*x2**3*y3**2*z2**2*x3*z3**2+2*x2**2*y3**2*z2*y2**2*z3**3+2*x2**2*y3**3*z2**2*y2*r1**2+2*x2**2*y3**2*z2**2*x3**2*r2**2+2*x2**4*y3**2*z2*z3*r1**2-2*x2**4*y3**2*z2*z3*r3**2-2*x2**2*y3**3*z2**2*y2*r3**2+2*x2**3*y3**2*z2**2*x3*r1**2-2*x2**3*y3**2*z2**2*x3*r3**2+2*y2**4*z3*x3**2*y3**2*z2+2*y2**2*z3*x3**4*z2*x2**2-4*y2**2*z3**2*x3**2*x2**2*y3**2+2*y2**3*z3**2*x3**2*z2**2*y3+2*y2**2*z3**2*x3**3*x2*z2**2-2*y2**3*z3**2*x3**2*x2**2*y3+2*y2**3*z3**2*x3**2*r1**2*y3+2*y2**2*z3*x3**4*z2*r1**2-2*y2**2*z3*x3**4*z2*r2**2+2*y2**2*z3**2*x3**2*x2**2*r3**2-2*y2**3*z3**2*x3**2*r2**2*y3+2*y2**2*z3**2*x3**3*x2*r1**2-2*y2**2*z3**2*x3**3*x2*r2**2-2*y2**2*z3**2*y3**2*x2**3*x3-4*y2**4*z3**2*y3**2*x2*x3+2*y2**2*z3**2*y3**2*x2**2*r3**2+4*y2**3*z3**2*y3*x2**3*x3+2*y2**5*z3**2*y3*x2*x3+4*y2*y3**3*z2**2*x3**3*x2+2*y2*y3**5*z2**2*x3*x2-2*y2**2*y3**2*z2**2*x3**3*x2-4*y2**2*y3**4*z2**2*x3*x2+2*y2**2*y3**2*z2**2*x3**2*r2**2-4*z2**2*x3**4*x2**2*y2*y3+2*z2*x3**2*x2**2*y2**2*z3**3+2*z2*x3**2*y2**4*z3*r1**2+2*z2**2*x3**2*y2**3*r1**2*y3-2*z2*x3**2*y2**4*z3*r3**2-2*z2**2*x3**2*y2**3*r3**2*y3-z2**4*y3**2*x3**2*x2**2-z2**4*y3**2*x3**2*y2**2+2*z2**3*y3**4*x2**2*z3+2*z2**3*y3**2*x2**2*z3**3+2*x2**2*y3**5*z2**2*y2-2*x2**2*y3**4*z2**2*y2**2-2*x2**4*y3**2*z2**2*x3**2+2*x2**3*y3**2*z2**2*x3**3+2*x2**4*y3**4*z2*z3+2*x2**3*y3**4*z2**2*x3+2*x2**2*y3**4*z2**2*r2**2-2*y2**4*z3**2*x3**2*y3**2+2*y2**5*z3**2*x3**2*y3+2*y2**4*z3*x3**4*z2+2*y2**2*z3**2*x3**3*x2**3-2*y2**2*z3**2*x3**4*x2**2+2*y2**4*z3**2*x3**3*x2+2*y2**2*z3*x3**4*z2**3-y2**2*z3**4*x3**2*x2**2+2*y2**4*z3**2*x3**2*r3**2-2*y2**2*z3**2*y3**4*x2**2+2*y2**3*z3**2*y3**3*x2**2-y2**2*z3**4*y3**2*x2**2-y2**4*z3**2*y3**2*x2**2+2*y2**3*y3**3*z2**2*x3**2-y2**2*y3**4*z2**2*x3**2-2*y2**4*y3**2*z2**2*x3**2-z2**4*y3**4*x2**2-2*x2**4*y3**4*z2**2-2*y2**4*z3**2*x3**4-y2**4*z3**4*x3**2-2*z2**2*x3**4*y2**4-z2**4*x3**4*y2**2-2*x2**4*z3**2*y3**4-x2**4*z3**4*y3**2-z3**2*y2**6*x3**2-x3**6*z2**2*y2**2-z3**2*x2**6*y3**2-2*y2**4*x3**4*y3**2+2*y2**4*x3**4*r3**2+2*y2**5*x3**4*y3-y2**4*x3**2*r1**4-y2**4*x3**2*y3**4+2*y2**5*x3**2*y3**3-y2**4*x3**2*r3**4-y2**6*x3**2*y3**2-y2**2*x3**4*r1**4-y2**2*x3**4*x2**4+2*y2**2*x3**5*x2**3-y2**2*x3**4*r2**4-y2**2*x3**6*x2**2-2*y2**4*x3**4*x2**2+2*y2**4*x3**4*r2**2+2*y2**4*x3**5*x2+2*x2**4*y3**5*y2-2*x2**4*y3**4*y2**2+2*x2**4*y3**4*r2**2-x2**2*y3**4*r1**4-x2**2*y3**6*y2**2+2*x2**2*y3**5*y2**3-x2**2*y3**4*y2**4-x2**2*y3**4*r2**4-x2**4*y3**2*r1**4-x2**6*y3**2*x3**2+2*x2**5*y3**2*x3**3-x2**4*y3**2*x3**4-x2**4*y3**2*r3**4+2*x2**5*y3**4*x3-2*x2**4*y3**4*x3**2+2*x2**4*y3**4*r3**2-y3**6*z2**2*x2**2-y2**4*x3**6-y2**6*x3**4-x2**6*y3**4-x2**4*y3**6-2*z2*x3**2*r1**2*y2**2*z3*r3**2-2*z2*y3**2*r2**2*x2**2*z3*r1**2+2*z2*y3**2*r2**2*x2**2*z3*r3**2+2*x2**4*y3**2*z2*z3**3+2*y2*r1**4*z2**2*y3*x3*x2+2*x2**2*y3**2*z2*y2**2*z3*r1**2-8*x2**2*y3**3*z2*r1**2*y2*z3-2*x2**2*y3**2*z2*y2**2*z3*r3**2-8*x2**3*y3**2*z2*z3*r1**2*x3+2*y2**2*z3*x3**2*r1**2*y3**2*z2-8*y2**3*z3*x3**2*r1**2*z2*y3-2*y2**2*z3*x3**2*z2*y3**2*r2**2-8*y2**2*z3*x3**3*z2*r1**2*x2-4*y2**2*z3**2*y3**2*x2*z2**2*x3-4*y2**2*z3**2*y3**2*x2*r1**2*x3+4*y2**2*z3**2*y3**2*x2*r2**2*x3-4*y2**3*z3*y3*z2*x3**3*x2-4*y2**3*z3*y3**3*z2*x3*x2-4*y2**3*z3**3*y3*z2*x3*x2+4*y2**3*z3**2*y3*x2*z2**2*x3-4*y2**3*z3**2*y3*x2*r2**2*x3-4*y2*y3**3*z2*x2**3*z3*x3+4*y2*y3**3*z2**2*x3*x2*z3**2-4*y2*y3**3*z2**3*x2*z3*x3-4*y2*y3**3*z2**2*x3*x2*r3**2-4*y2**2*y3**2*z2**2*x3*r1**2*x2+4*y2**2*y3**2*z2**2*x3*x2*r3**2-4*z2**2*x3**2*x2**2*y2*z3**2*y3+2*z2*x3**2*x2**2*y2**2*z3*r1**2-4*z2**2*x3**2*x2**2*y2*r1**2*y3-2*z2*x3**2*x2**2*y2**2*z3*r3**2+4*z2**2*x3**2*x2**2*y2*r3**2*y3-4*z2**3*x3**3*x2*y2*z3*y3+4*z2**2*x3**3*x2*y2*z3**2*y3-4*z2*x3**3*x2**3*y3*y2*z3-4*z2**2*x3**3*x2*y2*r3**2*y3+4*x2**3*z3**2*x3*y2*z2**2*y3-4*x2**3*z3**3*x3*y2*z2*y3-4*x2**3*z3**2*x3*y2*r2**2*y3+2*x2**2*z3*x3**2*r1**2*y3**2*z2-4*x2**2*z3**2*x3**2*r1**2*y3*y2-2*x2**2*z3*x3**2*z2*y3**2*r2**2+4*x2**2*z3**2*x3**2*y2*r2**2*y3-4*y2*z3**3*z2**3*y3*x3*x2+2*y2*z3**2*z2**4*y3*x2*x3+2*y2*z3**4*z2**2*y3*x3*x2-2*r1**2*y3**2*z2*x2**2*z3*r3**2-2*y2**2*z3*r1**2*z2*x3**2*r2**2+2*r1**4*y3*y2*z3**2*x2*x3+2*z2**2*x3**5*y2**2*x2+2*z2**2*x3**4*y2**3*y3+2*z2*x3**2*y2**4*z3**3+2*z2**2*x3**4*y2**2*r2**2-z2**2*x3**4*x2**2*y3**2+2*x2**5*z3**2*x3*y3**2-x2**4*z3**2*x3**2*y2**2-2*x2**4*z3**2*x3**2*y3**2+2*x2**4*z3**2*y3**3*y2+2*x2**4*z3**2*y3**2*r3**2-2*y2**2*x3**4*z2**2*y3**2-2*z2**2*x3**2*x2**2*y3**4-2*x2**2*z3**2*y2**4*x3**2-2*x2**4*y3**2*y2**2*z3**2+2*y2**2*z3**3*z2**3*x3**2-z3**2*y2**2*r1**4*x3**2-z3**2*y2**2*z2**4*x3**2-z3**2*y2**2*r2**4*x3**2-2*z3**2*y2**4*x3**2*z2**2+2*z3**2*y2**4*x3**2*r2**2-2*x3**4*z2**2*y2**2*z3**2+2*x3**4*z2**2*y2**2*r3**2-x3**2*z2**2*y2**2*r1**4-x3**2*z2**2*y2**2*z3**4-x3**2*z2**2*y2**2*r3**4-2*z3**2*x2**4*y3**2*z2**2+2*z3**2*x2**4*y3**2*r2**2-z3**2*x2**2*r1**4*y3**2-z3**2*x2**2*z2**4*y3**2-z3**2*x2**2*r2**4*y3**2+2*y2**3*x3**4*r1**2*y3-2*y2**3*x3**4*x2**2*y3-2*y2**3*x3**4*r2**2*y3+2*y2**4*x3**3*r1**2*x2-2*y2**4*x3**3*x2*y3**2-2*z2**2*x3**2*x2**2*y3**2*z3**2+2*z2**2*x3**2*x2**2*y3**2*r3**2-2*x2**2*z3**2*y2**2*x3**2*z2**2+2*x2**2*z3**2*y2**2*x3**2*r2**2+2*x2**2*y3**2*y2**2*z3**2*r2**2+2*y2**2*z3**3*z2*x3**2*r1**2-2*y2**2*z3**3*z2*x3**2*r2**2+2*z2**3*x3**2*y2**2*z3*r1**2-2*z2**3*x3**2*y2**2*z3*r3**2+2*x2**2*z3**3*r1**2*y3**2*z2-2*x2**2*z3**3*z2*y3**2*r2**2+2*r1**4*y3**2*z2*x2**2*z3+2*y2**2*z3*r1**4*z2*x3**2+2*x2**2*z3*y3**4*r1**2*z2+2*x2**2*z3**2*y3**3*r1**2*y2-2*x2**2*z3*y3**4*z2*r2**2-2*x2**2*z3**2*y3**3*y2*r2**2+2*x2**3*z3**2*y3**2*r1**2*x3-2*x2**3*z3**2*y3**2*r2**2*x3-2*y2**2*z3**2*z2**2*y3**2*x2**2-2*y2**2*x3**2*z2**2*y3**2*z3**2+2*y2**2*x3**2*z2**2*y3**2*r3**2-4*y2*z3**2*z2**2*y3*x3*x2*r3**2-4*y2*z3**3*z2*y3*x2*r1**2*x3+4*y2*z3**3*z2*y3*x2*r2**2*x3-4*r1**4*y3*y2*z3*z2*x3*x2-4*r1**2*y3*y2*z3**2*x2*r2**2*x3-4*y2*r1**2*z2**2*y3*x3*x2*r3**2+4*r1**2*y3*y2*z3*z2*x3*x2*r3**2+4*y2*r1**2*z2*y3*x2*z3*r2**2*x3+2*z2*x3**2*r2**2*y2**2*z3*r3**2+2*y2*z3**2*r2**4*y3*x2*x3+2*y2*r3**4*z2**2*y3*x3*x2+4*y2**2*x3*x2*y3**2*r1**2*r3**2+4*y2**2*x3*x2*y3**2*r1**2*r2**2-4*y2**2*x3*x2*y3**2*r3**2*r2**2+4*y2*x3**2*x2**2*y3*r1**2*r2**2+4*y2*x3**2*x2**2*y3*r1**2*r3**2-4*y2*x3**2*x2**2*y3*r2**2*r3**2-4*y2**3*x3*x2*y3*z3**2*r3**2-4*y2*x3*x2*y3**3*r1**2*r2**2-4*y2**3*x3*x2*y3*r1**2*r3**2-4*y2*x3*x2*y3**3*z2**2*r2**2-4*y2*x3*x2**3*y3*r1**2*r3**2-4*y2*x3**3*x2*y3*r1**2*r2**2-4*y2*x3**3*x2*y3*z2**2*r2**2-4*y2*x3*x2**3*y3*z3**2*r3**2-4*z3**2*y2**2*r1**2*x3**2*z2**2+2*z3**2*y2**2*r1**2*x3**2*r2**2+2*z3**2*y2**2*z2**2*x3**2*r2**2+2*x3**2*z2**2*y2**2*z3**2*r3**2+2*x3**2*z2**2*y2**2*r1**2*r3**2-4*z3**2*x2**2*r1**2*y3**2*z2**2+2*z3**2*x2**2*r1**2*y3**2*r2**2+2*z3**2*x2**2*z2**2*y3**2*r2**2-2*y2**3*x3**2*r1**2*y3*r3**2-2*y2**3*x3**2*x2**2*y3*r1**2+2*y2**3*x3**2*x2**2*y3*r3**2-2*y2**3*x3**2*r1**2*r2**2*y3+2*y2**3*x3**2*r3**2*r2**2*y3-2*y2**2*x3**3*r1**2*x2*r2**2-2*y2**2*x3**3*r1**2*x2*y3**2-2*y2**2*x3**3*r1**2*x2*r3**2+2*y2**2*x3**3*r2**2*x2*y3**2+2*y2**2*x3**3*r2**2*x2*r3**2+2*y2**2*x3**2*r1**2*y3**2*r2**2+4*y2**2*x3**2*x2**2*y3**2*r2**2+2*y2**2*x3**2*r1**2*x2**2*r3**2+4*y2**2*x3**2*x2**2*y3**2*r3**2-8*y2**3*x3**3*r1**2*x2*y3-2*x2**2*y3**3*r1**2*y2*x3**2-2*x2**2*y3**3*r1**2*y2*r3**2-2*x2**2*y3**3*y2*r1**2*r2**2+2*x2**2*y3**3*y2*x3**2*r2**2+2*x2**2*y3**3*y2*r3**2*r2**2-2*x2**3*y3**2*r1**2*y2**2*x3-2*x2**3*y3**2*r1**2*r2**2*x3-2*x2**3*y3**2*r1**2*x3*r3**2+2*x2**3*y3**2*y2**2*x3*r3**2+2*x2**3*y3**2*r2**2*x3*r3**2+2*x2**2*y3**2*y2**2*r1**2*r3**2-4*y2*z3*r2**2*y3*z2*x3*x2*r3**2-4*x2**4*y3**2*r1**2*x3**2+2*x2**4*y3**2*r1**2*r3**2+2*x2**3*y3**2*r1**2*x3**3+2*x2**4*y3**2*x3**2*r2**2-2*x2**5*y3**2*x3*r3**2-2*x2**3*y3**2*r2**2*x3**3+2*x2**4*y3**2*x3**2*r3**2-y3**2*z2**2*r1**4*x2**2-y3**2*z2**2*x2**2*z3**4-y3**2*z2**2*x2**2*r3**4-2*y3**4*z2**2*x2**2*z3**2+2*y3**4*z2**2*x2**2*r3**2+4*y2**3*x3*x2**3*y3**3+4*y2**3*x3**3*x2*y3**3+2*y2*x3*x2**5*y3**3+2*y2**3*x3**5*x2*y3+2*y2**3*x3*x2*y3**5-4*y2**4*x3*x2*y3**4+2*y2**5*x3*x2*y3**3+2*y2*x3**3*x2**5*y3-4*y2*x3**4*x2**4*y3+2*y2**5*x3**3*x2*y3+2*y2*x3**5*x2**3*y3+2*y2*x3*x2**3*y3**5+4*y2**3*x3**3*x2**3*y3+4*y2*x3**3*x2**3*y3**3-2*y2**4*x3**3*x2*r3**2-2*y2**5*x3**2*r3**2*y3+2*y2**4*x3**2*y3**2*r2**2+2*y2**3*x3**2*r1**2*y3**3+2*y2**3*x3**2*r1**4*y3-4*y2**4*x3**2*r1**2*y3**2-3*y2**4*x3**2*x2**2*y3**2+2*y2**4*x3**2*r1**2*r3**2+2*y2**5*x3**2*r1**2*y3+2*y2**4*x3**2*y3**2*r3**2-2*y2**3*x3**2*y3**3*r2**2-y2**2*x3**2*r1**4*y3**2-3*y2**2*x3**2*x2**4*y3**2-y2**2*x3**2*r2**4*y3**2-y2**2*x3**2*r1**4*x2**2-3*y2**2*x3**2*x2**2*y3**4-y2**2*x3**2*x2**2*r3**4+2*y2**2*x3**3*r1**4*x2+2*y2**2*x3**3*r1**2*x2**3-4*y2**2*x3**4*r1**2*x2**2+2*y2**2*x3**4*r1**2*r2**2+2*y2**2*x3**5*r1**2*x2+2*y2**2*x3**4*x2**2*r2**2-2*y2**2*x3**3*x2**3*r3**2-2*y2**2*x3**5*r2**2*x2-3*y2**2*x3**4*x2**2*y3**2+2*y2**2*x3**4*x2**2*r3**2+2*x2**4*y3**3*y2*r1**2-2*x2**4*y3**3*y2*x3**2-2*x2**4*y3**3*y2*r3**2+2*x2**3*y3**4*r1**2*x3-2*x2**3*y3**4*y2**2*x3-2*x2**3*y3**4*r2**2*x3-2*x2**2*y3**3*y2**3*r3**2+2*x2**2*y3**4*y2**2*r2**2+2*x2**2*y3**5*r1**2*y2+2*x2**2*y3**3*r1**4*y2-4*x2**2*y3**4*r1**2*y2**2+2*x2**2*y3**4*r1**2*r2**2+2*x2**2*y3**3*y2**3*r1**2+2*x2**2*y3**4*y2**2*r3**2-2*x2**2*y3**5*y2*r2**2-x2**2*y3**2*y2**2*r1**4-x2**2*y3**2*y2**2*r3**4-x2**2*y3**2*r1**4*x3**2-x2**2*y3**2*r2**4*x3**2+2*x2**3*y3**2*r1**4*x3+2*x2**5*y3**2*r1**2*x3+2*x2**2*y3**2*r1**2*x3**2*r2**2-8*x2**3*y3**3*r1**2*y2*x3+2*y3**2*z2**2*r1**2*x2**2*r3**2+2*y3**2*z2**2*x2**2*z3**2*r3**2+4*y2**4*x3*x2*y3**2*r3**2+4*y2**3*x3*x2*y3**3*z2**2-4*y2**3*x3*x2*y3**3*r2**2-4*y2**2*x3*x2*y3**4*r1**2-4*y2**2*x3*x2*y3**2*r1**4+8*y2**3*x3*x2*y3**3*r1**2+4*y2*x3*x2**3*y3**3*z2**2-4*y2*x3*x2**3*y3**3*r2**2-4*y2**4*x3*x2*y3**2*r1**2+4*y2**3*x3**3*x2*y3*z3**2-4*y2**3*x3**3*x2*y3*r3**2+4*y2**3*x3*x2*y3**3*z3**2-4*y2**3*x3*x2*y3**3*r3**2+4*y2**2*x3*x2*y3**4*r2**2+2*y2*x3*x2*y3**3*r1**4+2*y2**3*x3*x2*y3*r1**4+2*y2**3*x3*x2*y3*z3**4+2*y2**3*x3*x2*y3*r3**4+2*y2*x3*x2*y3**3*z2**4+2*y2*x3*x2*y3**3*r2**4+2*y2*x3*x2**3*y3*r1**4+2*y2*x3**3*x2*y3*r1**4+2*y2*x3**3*x2*y3*z2**4+2*y2*x3**3*x2*y3*r2**4+2*y2*x3*x2**3*y3*z3**4+2*y2*x3*x2**3*y3*r3**4-4*y2*x3**2*x2**2*y3*r1**4-4*y2*x3**2*x2**4*y3*r1**2+8*y2*x3**3*x2**3*y3*r1**2-4*y2*x3**4*x2**2*y3*r1**2+4*y2*x3**3*x2**3*y3*z2**2-4*y2*x3**3*x2**3*y3*r2**2+4*y2*x3**2*x2**4*y3*r3**2+4*y2**3*x3**3*x2*y3*z2**2-4*y2**3*x3**3*x2*y3*r2**2+4*y2*x3**4*x2**2*y3*r2**2+4*y2*x3**3*x2**3*y3*z3**2-4*y2*x3**3*x2**3*y3*r3**2+4*y2*x3*x2**3*y3**3*z3**2-4*y2*x3*x2**3*y3**3*r3**2+16*y2**2*x3**2*x2**2*y3**2*r1**2)
        b=(-z2**3*y3**2-x2**2*y3**2*z2-y2**2*z3*x3**2-y2**2*z3*y3**2+y2**3*z3*y3+y2*y3**3*z2-y2**2*y3**2*z2-z2*x3**2*x2**2-z2*x3**2*y2**2+z2*x3**3*x2+x2**3*z3*x3-x2**2*z3*x3**2-x2**2*z3*y3**2+y2*z3*z2**2*y3+y2*x3**2*z2*y3+y2*z3**2*z2*y3+z2*x3*x2*y3**2+z2*x3*x2*z3**2+x2*z3*y2**2*x3+x2*z3*z2**2*x3+x2**2*y3*y2*z3-y2**2*z3**3-z2**3*x3**2-x2**2*z3**3-r1**2*y3**2*z2-y2**2*z3*r1**2+r1**2*y3*y2*z3+y2*r1**2*z2*y3+z2*y3**2*r2**2-z2*x3**2*r1**2+z2*x3**2*r2**2-x2**2*z3*r1**2+x2**2*z3*r3**2+y2**2*z3*r3**2-y2*z3*r2**2*y3-y2*r3**2*z2*y3+z2*x3*r1**2*x2-z2*x3*x2*r3**2+x2*z3*r1**2*x3-x2*z3*r2**2*x3)
        c=(-2*y2*z3*z2*y3-2*z2*x3*x2*z3+z3**2*y2**2+x3**2*z2**2+z3**2*x2**2+y2**2*x3**2+x2**2*y3**2+y3**2*z2**2-2*y2*x3*x2*y3)
        if a<0 or c==0:
            result = np.array([np.nan,np.nan,np.nan]).reshape((3,1))
            return result # coz c is the denominator and a is under a root
        #     error('Error in interx.m at z');
        za=-0.5*(b-a**(0.5))/c
        zb=-0.5*(b+a**(0.5))/c
        if za>zb:
            if(pos):
                z=za
            else:
                z=zb
        else:
            if(pos):
                z=zb
            else:
                z=za
        a=(2*z*z2*x3-2*x2*z*z3+r1**2*x2-r1**2*x3-x2**2*x3-y2**2*x3-z2**2*x3+r2**2*x3+x2*x3**2+x2*y3**2+x2*z3**2-x2*r3**2)
        b=(-2*y2*x3+2*x2*y3)
        if b==0:
            result = np.array([np.nan,np.nan,np.nan]).reshape((3,1))
            return result # coz b is the denominator in the expression
        y=a/b
        if x2 == 0:
            result = np.array([np.nan,np.nan,np.nan]).reshape((3,1))
            return result
        x = 0.5*(r1**2+x2**2-2*y*y2+y2**2-2*z*z2+z2**2-r2**2)/x2
        # convert result back to global
        result = np.array([[x1],[y1],[z1],[1]]) + np.array([[x],[y],[z],[0]])

        return result
